<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<!-- 1.DataSource 설정 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@192.168.1.18:1521:xe" />
		<property name="username" value="hr" />
		<property name="password" value="hr" />
	</bean>
	<!-- 2.mybatis SqlSession객체관련 정보 설정 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="configLocation" value="transaction/configuration.xml" 
			/> configuration의 매퍼설정을 아래 태그로 이동하고 configuration.xml 파일 설정은 제외해도 됨 -->
		<property name="mapperLocations" value="transaction/test1-mapper.xml" />
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!-- 3. 사용자bean annotation을 위한 처리 @Component , @Service, @Controller, @RequestMapping, 
		@SessionAttribute........... -->
	<context:component-scan base-package="transaction" />

	<!-- @Aspect, @Before ........-->
	<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->

	<!-- 4. TransactionManager객체 생성 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- @Transactional -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	
	<!-- 트랜잭션 정책 설정 advice(공통관심사) -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> <tx:method name="get*" read-only="false" rollback-for="Exception" 
		propagation="REQUIRED" isolation="DEFAULT" /> get 메소드 종류만 / read-only로 읽기전용 
		취소 / 모든 예외에 대해 중지 / 기존의 트랜젝션 따라감 없으면 생성 / 기존 sql사항 지킴 </tx:attributes> </tx:advice> -->

	<!-- 트랜잭션 적용 대상 설정 -->

	<!-- <aop:config> <aop:pointcut expression="execution(public * transaction.*.*(..))" 
		id="testService" /> <aop:advisor advice-ref="txAdvice" pointcut-ref="testService"/> 
		</aop:config> -->

</beans>