<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http:mybatis.org/dtd/mybatis-3-mapper.dtd">


<!--  test.all 로 호출 (mapper 파일의 이름(namespace : 선택적사항이지만 중복방지시 필요)으로 여러 mapper파일 구분)-->
<mapper namespace="dynamic">
	<!-- sql를 조각별로 나뉘어서 조합하여 사용한다  (재사용성 증가)-->
	<sql id="select-emp">
		select * from employees
	</sql>
	
	<sql id="where-id">
		where employee_id >= #{value_id}
	</sql>
	
	<sql id="order-id">
		order by employee_id desc
	</sql>
	
	<select id="getEmpReuse" resultMap="emp.empVOMap" parameterType="int">
		<include refid="select-emp"/>
		<include refid="where-id"/>
	</select>
	
	<select id="getEmpReuse2" resultMap="emp.empVOMap">
		<include refid="select-emp"/>
		<include refid="order-id"/>
	</select>
	
	<select id="getEmpDynamicWhere" resultMap="emp.empVOMap" parameterType="empvo">
		select * from employees
			<where>
				<if test="name == null">
					salary is null
				</if>
				<if test="name != null">
					first_name = #{name}
				</if>
			</where>
	</select>
	
	<update id="updateEmp" parameterType="empvo">
		update employees
			<set>
				<if test="name != null">
					first_name = #{name},
				</if>
				<if test="email != null">
					email = #{email},
				</if>
				<if test="salary != 0">
					salary = #{salary},
				</if>
				<if test="department_id != null">
					department_id = #{department_id}
				</if>
			</set>
		where employee_id = #{id}
	</update>
	
	<sql id="where-id-collection">
		where employee_id between
		<foreach item="item" collection="array" separator="and">
			#{item}
		</foreach>
	</sql>
	
	<select id="getEmpReuseCollection" resultMap="emp.empVOMap" parameterType="int[]">
		 select * from employees
		 <include refid="where-id-collection"/>
	</select>
	
	<select id="getEmpReuseCollection2" resultMap="emp.empVOMap" parameterType="java.util.List">
		 select * from employees where job_id in
		 <!--(' ' , ' ' , ' ')  -->
		 <foreach item="job" collection="list" open="(" close=")" separator=",">
		 	#{job}
		 </foreach>
	</select>
	
	<select id="getEmpRownum" parameterType="int[]" resultMap="emp.empVOMap">
		<!-- employees테이블에서 입사일자가 최근인 사람부터 정렬하여 사용자가 지정한 순서로 ?번부터 ?번까지 조회 -->
		select * 
			from(select rownum r, e.*   <!-- 정렬한 이후 rownum 지정 -->
				from(select * from employees order by hire_date desc) e)  <!-- 정렬을 위한쿼리  -->
		where rownum between
		<foreach item="rownum" collection="array" separator="and">
			#{rownum}
		</foreach>
	</select>
</mapper>
